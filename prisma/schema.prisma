generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//media system

model Media {
    id               Int          @id @default(autoincrement())
    media_typeId     Int
    media_url        String
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    MilestoneId      Int?
    achievementId    Int?
    Memory           Memory[]
    Account          Account[]
    Community        Community[]
    Account_banners  Account[]    @relation(name: "banner")
    Groups_banners   Group[]      @relation(name: "banner")
    Groups_profiles  Group[]      @relation(name: "profile")
    Account_profiles Account[]    @relation(name: "profile")
    Milestone        Milestone?   @relation(fields: [MilestoneId], references: [id])
    media_type       Media_type   @relation(fields: [media_typeId], references: [id])
    Achievement      Achievement? @relation(fields: [achievementId], references: [id])
}

model Media_type {
    id         Int     @id @default(autoincrement())
    media_type String
    Media      Media[]
}

//user system

model Status {
    id          Int         @id @default(autoincrement())
    status      String
    User        User[]
    accounts    Account[]
    communities Community[]
}

model Role {
    id       Int       @id @default(autoincrement())
    role     String
    accounts Account[]
}

model User {
    id                     Int       @id @default(autoincrement())
    names                  String
    email                  String    @unique
    password               String
    country                String
    emailVerificationToken String?   @unique
    statusId               Int       @default(1)
    emailVerified          Boolean   @default(false)
    updatedAt              DateTime  @updatedAt
    createdAt              DateTime  @default(now())
    accounts               Account[]
    status                 Status    @relation(fields: [statusId], references: [id])
}

model Community {
    id          Int           @id @default(autoincrement())
    name        String
    type        String
    vision      String
    statusId    Int           @default(1)
    profile     Int?
    updatedAt   DateTime      @updatedAt
    createdAt   DateTime      @default(now())
    groups      Group[]
    memories    Memory[]
    accounts    Account[]
    milestones  Milestone[]
    achievement Achievement[]
    media       Media?        @relation(references: [id], fields: [profile])
    status      Status        @relation(references: [id], fields: [statusId])
}

model Account {
    id                Int                @id @default(autoincrement())
    userId            Int
    communityId       Int
    statusId          Int                @default(1)
    roleId            Int                @default(3)
    profile           Int?
    banner            Int?
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    mediaId           Int?
    milestone_owner   Int?
    milestone_upvote  Int?
    groupsId          Int?
    achievementId     Int?
    Post              Post[]
    Memory            Memory?
    comments          Comment[]
    reactions         Reaction[]
    MemoryViewers     MemoryViewers[]
    skills            SkillsOnAccounts[]
    user              User               @relation(references: [id], fields: [userId])
    role              Role               @relation(references: [id], fields: [roleId])
    Media             Media?             @relation(fields: [mediaId], references: [id])
    status            Status             @relation(references: [id], fields: [statusId])
    Group             Group?             @relation(fields: [groupsId], references: [id])
    community         Community          @relation(references: [id], fields: [communityId])
    achievement       Achievement?       @relation(fields: [achievementId], references: [id])
    media_banner      Media?             @relation(references: [id], fields: [banner], name: "banner")
    media_profile     Media?             @relation(references: [id], fields: [profile], name: "profile")
    milestone_owners  Milestone?         @relation(fields: [milestone_owner], references: [id], name: "owners")
    milestone_upvotes Milestone?         @relation(fields: [milestone_upvote], references: [id], name: "upvotes")
}

model Group {
    id            Int       @id @default(autoincrement())
    description   String
    communityId   Int
    profile       Int?
    banner        Int
    updatedAt     DateTime  @updatedAt
    createdAt     DateTime  @default(now())
    members       Account[]
    community     Community @relation(references: [id], fields: [communityId])
    media_banner  Media?    @relation(references: [id], fields: [banner], name: "banner")
    media_profile Media?    @relation(references: [id], fields: [profile], name: "profile")
}

//posting system

model Post_Types {
    id    Int    @id @default(autoincrement())
    type  String
    posts Post[]
}

model Reaction {
    id         Int      @id @default(autoincrement())
    reaction   String
    affectorId Int
    accountId  Int
    commentId  Int?
    postId     Int?
    Post       Post?    @relation(references: [id], fields: [postId])
    account    Account  @relation(references: [id], fields: [accountId])
    Comment    Comment? @relation(references: [id], fields: [commentId])
}

model Comment {
    id         Int        @id @default(autoincrement())
    comment    String
    affectorId Int
    accountId  Int
    createdAt  DateTime   @default(now())
    postId     Int?
    reactions  Reaction[]
    Post       Post?      @relation(fields: [postId], references: [id])
    account    Account    @relation(references: [id], fields: [accountId])
}

model Post {
    id            Int          @id @default(autoincrement())
    typeId        Int
    posted_by     Int
    MilestoneId   Int?
    achievementId Int?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    comments      Comment[]
    reactions     Reaction[]
    type          Post_Types   @relation(references: [id], fields: [typeId])
    posted        Account      @relation(references: [id], fields: [posted_by])
    Milestone     Milestone?   @relation(references: [id], fields: [MilestoneId])
    achievement   Achievement? @relation(references: [id], fields: [achievementId])
}

model Milestone {
    id          Int       @id @default(autoincrement())
    communityId Int
    description String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Post        Post[]
    medias      Media[]
    owners      Account[] @relation(name: "owners")
    upvotes     Account[] @relation(name: "upvotes")
    community   Community @relation(references: [id], fields: [communityId])
}

model Achievement {
    id          Int       @id @default(autoincrement())
    communityId Int
    description String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Post        Post[]
    medias      Media[]
    owners      Account[]
    community   Community @relation(references: [id], fields: [communityId])
}

//memories system

model Memory_Type {
    id       Int      @id @default(autoincrement())
    type     String
    memories Memory[]
}

model Skill {
    id       Int                @id @default(autoincrement())
    name     String
    icon     String
    accounts SkillsOnAccounts[]
}

model Memory {
    id            Int             @id @default(autoincrement())
    memory_Type   Int
    accountId     Int             @unique
    communityId   Int
    mediaId       Int             @unique
    content       String
    viewers       Int[]
    createdAt     DateTime        @default(now())
    MemoryViewers MemoryViewers[]
    media         Media           @relation(fields: [mediaId], references: [id])
    account       Account         @relation(fields: [accountId], references: [id])
    Memory_Type   Memory_Type     @relation(fields: [memory_Type], references: [id])
    community     Community       @relation(fields: [communityId], references: [id])
}

model SkillsOnAccounts {
    accountId Int
    skillId   Int
    skill     Skill   @relation(fields: [skillId], references: [id])
    account   Account @relation(fields: [accountId], references: [id])

    @@id([accountId, skillId])
}

model MemoryViewers {
    accountId Int
    memoryId  Int
    memory    Memory  @relation(fields: [memoryId], references: [id])
    account   Account @relation(fields: [accountId], references: [id])

    @@id([accountId, memoryId])
}
