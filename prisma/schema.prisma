generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//media system

model Media {
    id               Int          @id @default(autoincrement())
    media_type       Media_type   @relation(fields: [media_typeId], references: [id])
    media_typeId     Int
    media_url        String
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    Community        Community[]
    Account          Account[]
    Account_profiles Account[]    @relation(name: "profile")
    Account_banners  Account[]    @relation(name: "banner")
    Milestone        Milestone?   @relation(fields: [MilestoneId], references: [id])
    MilestoneId      Int?
    Groups_profiles  Groups[]     @relation(name: "profile")
    Groups_banners   Groups[]     @relation(name: "banner")
    Achievement      Achievement? @relation(fields: [achievementId], references: [id])
    achievementId    Int?
}

model Media_type {
    id         Int     @id @default(autoincrement())
    media_type String
    Media      Media[]
}

//user system

model Status {
    id          Int         @id @default(autoincrement())
    status      String
    accounts    Account[]
    communities Community[]
    User        User[]
}

model Role {
    id       Int       @id @default(autoincrement())
    role     String
    accounts Account[]
}

model User {
    id                     Int       @id @default(autoincrement())
    names                  String
    email                  String    @unique
    password               String
    country                String
    emailVerificationToken String?   @unique
    emailVerified          Boolean   @default(false)
    createdAt              DateTime  @default(now())
    updatedAt              DateTime  @updatedAt
    status                 Status    @relation(fields: [statusId], references: [id])
    statusId               Int       @default(1)
    accounts               Account[]
}

model Community {
    id          Int           @id @default(autoincrement())
    name        String
    type        String
    vision      String
    status      Status        @relation(references: [id], fields: [statusId])
    statusId    Int           @default(1)
    media       Media?        @relation(references: [id], fields: [profile])
    profile     Int?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    milestones  Milestone[]
    groups      Groups[]
    achievement Achievement[]
    accounts    Account[]
}

model Account {
    id                Int          @id @default(autoincrement())
    user              User         @relation(references: [id], fields: [userId])
    userId            Int
    community         Community    @relation(references: [id], fields: [communityId])
    communityId       Int
    status            Status       @relation(references: [id], fields: [statusId])
    statusId          Int          @default(1)
    role              Role         @relation(references: [id], fields: [roleId])
    roleId            Int          @default(3)
    media_profile     Media?       @relation(references: [id], fields: [profile], name: "profile")
    profile           Int?
    media_banner      Media?       @relation(references: [id], fields: [banner], name: "banner")
    banner            Int?
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    reactions         Reaction[]
    comments          Comment[]
    memories          Memory[]
    Media             Media?       @relation(fields: [mediaId], references: [id])
    mediaId           Int?
    Post              Post[]
    milestone_owners  Milestone?   @relation(fields: [milestone_owner], references: [id], name: "owners")
    milestone_owner   Int?
    milestone_upvotes Milestone?   @relation(fields: [milestone_upvote], references: [id], name: "upvotes")
    milestone_upvote  Int?
    Groups            Groups?      @relation(fields: [groupsId], references: [id])
    groupsId          Int?
    achievement       Achievement? @relation(fields: [achievementId], references: [id])
    achievementId     Int?
}

model Groups {
    id            Int       @id @default(autoincrement())
    description   String
    community     Community @relation(references: [id], fields: [communityId])
    communityId   Int
    media_profile Media?    @relation(references: [id], fields: [profile], name: "profile")
    profile       Int?
    media_banner  Media?    @relation(references: [id], fields: [banner], name: "banner")
    banner        Int
    members       Account[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

//posting system

model Post_Types {
    id    Int    @id @default(autoincrement())
    type  String
    posts Post[]
}

model Reaction {
    id         Int      @id @default(autoincrement())
    reaction   String
    affectorId Int
    account    Account  @relation(references: [id], fields: [accountId])
    accountId  Int
    Comment    Comment? @relation(references: [id], fields: [commentId])
    commentId  Int?
    Post       Post?    @relation(references: [id], fields: [postId])
    postId     Int?
}

model Comment {
    id         Int        @id @default(autoincrement())
    comment    String
    reactions  Reaction[]
    affectorId Int
    account    Account    @relation(references: [id], fields: [accountId])
    accountId  Int
    createdAt  DateTime   @default(now())
    Post       Post?      @relation(fields: [postId], references: [id])
    postId     Int?
}

model Post {
    id            Int          @id @default(autoincrement())
    type          Post_Types   @relation(references: [id], fields: [typeId])
    typeId        Int
    posted        Account      @relation(references: [id], fields: [posted_by])
    posted_by     Int
    Milestone     Milestone?   @relation(references: [id], fields: [MilestoneId])
    MilestoneId   Int?
    achievement   Achievement? @relation(references: [id], fields: [achievementId])
    achievementId Int?
    reactions     Reaction[]
    comments      Comment[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model Milestone {
    id          Int       @id @default(autoincrement())
    community   Community @relation(references: [id], fields: [communityId])
    communityId Int
    description String
    medias      Media[]
    owners      Account[] @relation(name: "owners")
    upvotes     Account[] @relation(name: "upvotes")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Post        Post[]
}

model Achievement {
    id          Int       @id @default(autoincrement())
    community   Community @relation(references: [id], fields: [communityId])
    communityId Int
    description String
    medias      Media[]
    owners      Account[]
    Post        Post[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

//memories system

model Memory_Types {
    id       Int      @id @default(autoincrement())
    type     String
    memories Memory[]
}

model Memory {
    id          Int          @id @default(autoincrement())
    Memory_Type Memory_Types @relation(fields: [memory_Type], references: [id])
    memory_Type Int
    content     String
    account     Account      @relation(fields: [accountId], references: [id])
    accountId   Int
}
