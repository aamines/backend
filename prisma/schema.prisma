generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//media system

model Media {
    id               String       @id @default(uuid())
    media_type       Media_type   @relation(fields: [media_typeId], references: [id])
    media_typeId     String
    media_url        String
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    Community        Community[]
    Account          Account[]
    Account_profiles Account[]    @relation(name: "profile")
    Account_banners  Account[]    @relation(name: "banner")
    Project          Project?     @relation(fields: [projectId], references: [id])
    projectId        String?
    Groups_profiles  Groups[]     @relation(name: "profile")
    Groups_banners   Groups[]     @relation(name: "banner")
    Achievement      Achievement? @relation(fields: [achievementId], references: [id])
    achievementId    String?
}

model Media_type {
    id         String  @id @default(uuid())
    media_type String
    Media      Media[]
}

//user system

model Status {
    id          Int      @id @default(autoincrement())
    status      String
    accounts    Account[]
    communities Community[]
    User        User[]
}

model Role {
    id       Int    @id @default(autoincrement())
    role     String
    accounts Account[]
}

model User {
    id                             String      @id @default(uuid())
    names                          String
    email                          String      @unique
    password                       String
    country                        String
    emailVerificationCode          String?     @unique
    emailVerificationCodeExpiresAt BigInt?
    resetPasswordCode              String?     @unique
    resetPasswordCodeExpiresAt     BigInt?
    emailVerified                  Boolean     @default(false)
    createdAt                      DateTime    @default(now())
    updatedAt                      DateTime    @updatedAt
    status                         Status      @relation(fields: [statusId], references: [id])
    statusId                       Int         @default(1)
    accounts                       Account[]
    Community                      Community[]
}

model Community {
    id          String               @id @default(uuid())
    name        String
    status      Status               @relation(references: [id], fields: [statusId])
    statusId    Int                  @default(1)
    description String
    media       Media?               @relation(references: [id], fields: [profile])
    profile     String?
    User        User                 @relation(fields: [creatorId], references: [id])
    creatorId   String
    createdAt   DateTime             @default(now())
    updatedAt   DateTime             @updatedAt
    accounts    AccountOnCommunity[]
    Project     Project[]
    Groups      Groups[]
    Achievement Achievement[]
    Account     Account[]
}

model Account {
    id                 String               @id @default(uuid())
    user               User                 @relation(references: [id], fields: [userId])
    userId             String
    status             Status               @relation(references: [id], fields: [statusId])
    statusId           Int                  @default(1)
    role               Role                 @relation(references: [id], fields: [roleId])
    roleId             Int                  @default(3)
    Community          Community            @relation(fields: [communityId], references: [id])
    communityId        String
    media_profile      Media?               @relation(references: [id], fields: [profile], name: "profile")
    profile            String?
    media_banner       Media?               @relation(references: [id], fields: [banner], name: "banner")
    banner             String?
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    reactions          Reaction[]
    comments           Comment[]
    memories           Memory[]
    Media              Media?               @relation(fields: [mediaId], references: [id])
    mediaId            String?
    Post               Post[]
    project_owners     Project?             @relation(fields: [project_owner], references: [id], name: "owners")
    project_owner      String?
    project_upvotes    Project?             @relation(fields: [project_upvote], references: [id], name: "upvotes")
    project_upvote     String?
    Groups             Groups?              @relation(fields: [groupsId], references: [id])
    groupsId           String?
    Achievement        Achievement?         @relation(fields: [achievementId], references: [id])
    achievementId      String?
    AccountOnCommunity AccountOnCommunity[]
}

model AccountOnCommunity {
    community   Community @relation(references: [id], fields: [communityId])
    communityId String
    account     Account   @relation(references: [id], fields: [accountId])
    accountId   String
    assignedAt  DateTime  @default(now())

    @@id([communityId, accountId])
}

model Groups {
    id            String    @id @default(uuid())
    description   String
    community     Community @relation(references: [id], fields: [communityId])
    communityId   String
    media_profile Media?    @relation(references: [id], fields: [profile], name: "profile")
    profile       String?
    media_banner  Media?    @relation(references: [id], fields: [banner], name: "banner")
    banner        String
    members       Account[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

//posting system

model Post_Types {
    id    String @id @default(uuid())
    type  String
    posts Post[]
}

model Reaction {
    id         String   @id @default(uuid())
    reaction   String
    affectorId Int
    account    Account  @relation(references: [id], fields: [accountId])
    accountId  String
    Comment    Comment? @relation(references: [id], fields: [commentId])
    commentId  String?
    Post       Post?    @relation(references: [id], fields: [postId])
    postId     String?
}

model Comment {
    id         String     @id @default(uuid())
    comment    String
    reactions  Reaction[]
    affectorId Int
    account    Account    @relation(references: [id], fields: [accountId])
    accountId  String
    createdAt  DateTime   @default(now())
    Post       Post?      @relation(fields: [postId], references: [id])
    postId     String?
}

model Post {
    id            String       @id @default(uuid())
    type          Post_Types   @relation(references: [id], fields: [typeId])
    typeId        String
    posted        Account      @relation(references: [id], fields: [posted_by])
    posted_by     String
    project       Project?     @relation(references: [id], fields: [projectId])
    projectId     String?
    achievement   Achievement? @relation(references: [id], fields: [achievementId])
    achievementId String?
    reactions     Reaction[]
    comments      Comment[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model Project {
    id          String    @id @default(uuid())
    community   Community @relation(references: [id], fields: [communityId])
    communityId String
    description String
    medias      Media[]
    owners      Account[] @relation(name: "owners")
    upvotes     Account[] @relation(name: "upvotes")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Post        Post[]
}

model Achievement {
    id          String    @id @default(uuid())
    community   Community @relation(references: [id], fields: [communityId])
    communityId String
    description String
    medias      Media[]
    owners      Account[]
    Post        Post[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

//memories system

model Memory_Types {
    id       String   @id @default(uuid())
    type     String
    memories Memory[]
}

model Memory {
    id          String       @id @default(uuid())
    Memory_Type Memory_Types @relation(fields: [memory_Type], references: [id])
    memory_Type String
    content     String
    account     Account      @relation(fields: [accountId], references: [id])
    accountId   String
}
