generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//user system

model Status {
    id          Int         @id @default(autoincrement())
    status      String
    accounts    Account[]
    communities Community[]
    User        User[]
}

model Role {
    id       Int       @id @default(autoincrement())
    role     String
    accounts Account[]
}

model User {
    id        Int       @id @default(autoincrement())
    names     String
    email     String    @unique
    password  String
    country   String
    status    Status    @relation(fields: [statusId], references: [id])
    statusId  Int       @default(1)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    accounts  Account[]
}

model Community {
    id          Int                  @id @default(autoincrement())
    name        String
    status      Status               @relation(references: [id], fields: [statusId])
    statusId    Int
    description String
    createdAt   DateTime             @default(now())
    updatedAt   DateTime             @updatedAt
    accounts    AccountOnCommunity[]
}

model Account {
    id          Int                  @id @default(autoincrement())
    user        User                 @relation(references: [id], fields: [userId])
    userId      Int
    status      Status               @relation(references: [id], fields: [statusId])
    statusId    Int
    role        Role                 @relation(references: [id], fields: [roleId])
    roleId      Int
    profile_pic String               @default("")
    cover_pic   String               @default("")
    createdAt   DateTime             @default(now())
    updatedAt   DateTime             @updatedAt
    reactions   Reaction[]
    comments    Comment[]
    memories    Memory[]
    communities AccountOnCommunity[]
}

model AccountOnCommunity {
    community   Community @relation(references: [id], fields: [communityId])
    communityId Int
    account     Account   @relation(references: [id], fields: [accountId])
    accountId   Int
    assignedAt  DateTime  @default(now())

    @@id([communityId, accountId])
}

//posting system

model Post_Types {
    id    Int    @id @default(autoincrement())
    type  String
    posts Post[]
}

model Reaction {
    id         Int      @id @default(autoincrement())
    reaction   String
    affectorId Int
    account    Account  @relation(references: [id], fields: [accountId])
    accountId  Int
    Comment    Comment? @relation(references: [id], fields: [commentId])
    commentId  Int?
    Post       Post?    @relation(references: [id], fields: [postId])
    postId     Int?
}

model Comment {
    id         Int        @id @default(autoincrement())
    comment    String
    reactions  Reaction[]
    affectorId Int
    account    Account    @relation(references: [id], fields: [accountId])
    accountId  Int
    createdAt  DateTime   @default(now())
}

model Post {
    id        Int        @id @default(autoincrement())
    type      Post_Types @relation(references: [id], fields: [typeId])
    typeId    Int
    content   String
    reactions Reaction[]
}

//memories system

model Memory_Types {
    id       Int      @id @default(autoincrement())
    type     String
    memories Memory[]
}

model Memory {
    id          Int          @id @default(autoincrement())
    Memory_Type Memory_Types @relation(fields: [memory_Type], references: [id])
    memory_Type Int
    content     String
    account     Account      @relation(fields: [accountId], references: [id])
    accountId   Int
}
